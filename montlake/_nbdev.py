# AUTOGENERATED BY NBDEV! DO NOT EDIT!

__all__ = ["index", "modules", "custom_doc_links", "git_url"]

index = {"data_stream_custom_range": "utils.utils.ipynb",
         "position_to_torsion": "atomgeom.features.ipynb",
         "position_to_distances": "atomgeom.features.ipynb",
         "position_to_planarangle": "atomgeom.features.ipynb",
         "get_D_pos_feats": "atomgeom.features.ipynb",
         "get_D_feats_feats": "atomgeom.features.ipynb",
         "get_features": "atomgeom.features.ipynb",
         "get_atoms_4": "atomgeom.utils.ipynb",
         "load_data": "exec.get_features.ipynb",
         "get_features_parallel": "exec.get_features.ipynb",
         "parse_args": "exec.run_exp.ipynb",
         "subset_data": "exec.run_exp.ipynb",
         "get_geom": "geometry.geometry.ipynb",
         "get_rm_tangent_sel": "geometry.geometry.ipynb",
         "get_nbr_wts": "geometry.geometry.ipynb",
         "get_wlpca_tangent_sel": "geometry.geometry.ipynb",
         "RiemannianManifold": "geometry.geometry.ipynb",
         "TangentBundle": "geometry.geometry.ipynb",
         "get_grads_pullback": "gradients.estimate.ipynb",
         "run_exp": "tslasso.main.ipynb",
         "GradientGroupLasso": "optimization.gradientgrouplasso.ipynb",
         "get_sr_lambda_parallel": "optimization.gradientgrouplasso.ipynb",
         "batch_stream": "optimization.gradientgrouplasso.ipynb",
         "get_selected_function_array": "optimization.utils.ipynb",
         "get_selected_function_ids": "optimization.utils.ipynb",
         "get_selected_functions_lm2": "optimization.utils.ipynb",
         "width": "plotting.plotting.ipynb",
         "plot_reg_path_ax_lambdasearch_customcolors_names": "plotting.plotting.ipynb",
         "plot_manifold_2d": "plotting.manifolds.ipynb",
         "plot_manifold_3d": "plotting.manifolds.ipynb",
         "plot_cosines": "plotting.plotting.ipynb",
         "get_rigid_ethanol_data": "simulations.rigidethanol.ipynb",
         "get_swiss_roll_data": "simulations.swissroll.ipynb",
         "get_dx_g_full": "simulations.swissroll.ipynb",
         "get_swiss_roll_gradients": "simulations.swissroll.ipynb",
         "get_swiss_roll_gradients_noy": "simulations.swissroll.ipynb",
         "get_swiss_roll_gradients_noy_norotate": "simulations.swissroll.ipynb",
         "get_basispursuit_losses": "statistics.basispursuit.ipynb",
         "normalize_L212": "statistics.normalization.ipynb",
         "cosine_similarity": "utils.utils.ipynb",
         "get_cosines": "utils.utils.ipynb",
         "get_kappa_s": "statistics.supportrecovery.ipynb",
         "get_coses_full_ind": "statistics.supportrecovery.ipynb",
         "get_mu_full_ind": "statistics.supportrecovery.ipynb",
         "get_min_min": "statistics.supportrecovery.ipynb",
         "get_gamma_max": "statistics.supportrecovery.ipynb",
         "get_detected_values2d": "utils.replicates.ipynb",
         "get_support_indices2d": "utils.replicates.ipynb",
         "get_supports": "utils.replicates.ipynb",
         "get_supports_brute": "utils.replicates.ipynb",
         "get_supports_lasso": "utils.replicates.ipynb",
         "Replicate": "utils.replicates.ipynb",
         "get_234_indices": "utils.utils.ipynb",
         "get_atoms4_full": "utils.utils.ipynb",
         "get_atoms3_full": "utils.utils.ipynb"}

modules = ["atomgeom/features.py",
           "atomgeom/utils.py",
           "exec/features.py",
           "exec/run_exp.py",
           "geometry/geometry.py",
           "gradients/estimate.py",
           "mflasso/main.py",
           "optimization/gradientgrouplasso.py",
           "optimization/utils.py",
           "plotting/flasso.py",
           "plotting/manifolds.py",
           "plotting/plotting.py",
           "simulations/rigidethanol.py",
           "simulations/swissroll.py",
           "statistics/basispursuit.py",
           "statistics/normalization.py",
           "statistics/supportrecovery.py",
           "tslasso/main.py",
           "utils/replicates.py",
           "utils/utils.py"]

doc_url = "https://{user}.github.io/montlake/"

git_url = "https://github.com/{user}/montlake/tree/{branch}/"

def custom_doc_links(name): return None
