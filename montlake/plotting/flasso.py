# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/plotting.flasso.ipynb (unless otherwise specified).

__all__ = ['width', 'plot_cos_boxes', 'plot_reg_path_ax_lambdasearch_customcolors_names',
           'plot_reg_path_ax_lambdasearch_customcolors_tslasso', 'plot_reg_path_ax_lambdasearch_customcolors_norm',
           'plot_watch_custom', 'plot_watch', 'plot_reg_path_ax_lambdasearch_customcolors']

# Cell
import numpy as np
from matplotlib import rcParams
from pylab import rcParams
import matplotlib.pyplot as plt
import math
import seaborn as sns
from collections import OrderedDict
from matplotlib.patches import Rectangle
rcParams['figure.figsize'] = 25, 10

def width(p,w):
    if p > 1.:
        output = 10**(np.log10(p)+w/2.)-10**(np.log10(p)-w/2.)
    else:
        output = w
    return(output)

def plot_cos_boxes(sup_sel, names, col, sel, d , nreps, axarr):

    sns.heatmap(col, yticklabels = names, xticklabels = names, ax = axarr, vmin = 0., vmax = 1.)
    cbar = axarr.collections[0].colorbar
    cbar.ax.tick_params(labelsize=40)
    axarr.set_xticklabels(axarr.get_xmajorticklabels(), fontsize = 60, rotation = 90)
    axarr.set_yticklabels(axarr.get_ymajorticklabels(), fontsize = 60, rotation = 90)

    if d == 2:
        for r in range(nreps):
            pos1 = np.where(sel == sup_sel[r,1])[0]
            pos2 =  np.where(sel == sup_sel[r,0])[0]
            axarr.add_patch(Rectangle((pos1, pos2), 1, 1,facecolor = [0,0,1,0.], hatch = '/',fill= True, edgecolor='green', lw=5))
            axarr.add_patch(Rectangle((pos2, pos1), 1, 1,facecolor = [0,0,1,0.], hatch = '/',fill= True, edgecolor='green', lw=5))


def plot_reg_path_ax_lambdasearch_customcolors_names(axes, coeffs, xaxis, fig, colors, names):
    p = coeffs.shape[3]
    q = coeffs.shape[1]
    gnames = np.asarray(list(range(p)), dtype=str)

    rcParams['axes.titlesize'] = 30
    plt.rc('text', usetex=True)

    normax = np.sqrt(np.sum(np.sum(np.sum(coeffs ** 2, axis=1), axis=1), axis=1).max())

    for k in range(q):
        for j in range(p):
            toplot = np.linalg.norm(coeffs[:, k, :, j], axis=1)
            w = .15
            widths = np.asarray([width(xaxis[i], w) for i in range(len(xaxis))])
            axes[k + 1].plot(xaxis, toplot, 'go--', linewidth=10, markersize=0, alpha=1.,
                             color=colors[j], label=gnames[j])
    for j in range(p):
        toplot = np.linalg.norm(np.linalg.norm(coeffs[:, :, :, j], axis=2), axis=1)
        axes[0].plot(xaxis, toplot, 'go--', linewidth=10, markersize=0, alpha=.5,
                     color=colors[j], label=gnames[j])

#     xax = xaxis.copy()
#     xax.sort()

    for k in range(1 + q):
        axes[k].tick_params(labelsize=80)
        axes[k].set_yscale('symlog')
        axes[k].set_ylim(bottom=0, top=normax)
        if (k == 0):
            tixx = np.hstack(
                [np.asarray([0]), 10 ** np.linspace(math.floor(np.log10(normax)), math.floor(np.log10(normax)) + 1, 2)])
        if k != 0:
            axes[k].set_yticklabels([])
        if k != q:
            axes[k + 1].set_title(names[k], fontsize=100)
        if k == 0:
            axes[k].set_title("Combined", fontdict={'fontsize': 140})
    for k in range(1 + q):
        axes[k].grid(True, which="both", alpha=True)
        axes[k].set_xlabel(r"$\lambda$", fontsize=140)

    axes[0].set_ylabel(r"$||\beta_j||$", fontsize=140)


def plot_reg_path_ax_lambdasearch_customcolors_tslasso(axes, coeffs, xaxis, fig, colors, names):
    p = coeffs.shape[3]
    q = coeffs.shape[1]
    gnames = np.asarray(list(range(p)), dtype=str)

    rcParams['axes.titlesize'] = 30
    plt.rc('text', usetex=True)

    normax = np.sqrt(np.sum(np.sum(np.sum(coeffs ** 2, axis=1), axis=1), axis=1).max())

    for j in range(p):
        toplot = np.linalg.norm(np.linalg.norm(coeffs[:, :, :, j], axis=2), axis=1)
        axes.plot(xaxis, toplot, 'go--', linewidth=10, markersize=0, alpha=.5,
                     color=colors[j], label=gnames[j])

    xax = xaxis.copy()
    xax.sort()

    axes.tick_params(labelsize=50)
    axes.set_yscale('symlog')
    axes.set_ylim(bottom=0, top=normax)

    tixx = np.hstack(
        [np.asarray([0]), 10 ** np.linspace(math.floor(np.log10(normax)), math.floor(np.log10(normax)) + 1, 2)])


    axes.set_title("Combined", fontdict={'fontsize': 70})

    axes.grid(True, which="both", alpha=True)
    axes.set_xlabel(r"$\lambda$", fontsize=50)
    axes.set_ylabel(r"$||\beta_j||$", fontsize=50)


def plot_reg_path_ax_lambdasearch_customcolors_norm(ax, coeffs, xaxis, fig, colors):
    p = coeffs.shape[3]
    q = coeffs.shape[1]
    gnames = np.asarray(list(range(p)), dtype=str)

    rcParams['axes.titlesize'] = 30
    plt.rc('text', usetex=True)

    normax = np.sqrt(np.sum(np.sum(np.sum(coeffs ** 2, axis=1), axis=1), axis=1).max())

    for j in range(p):
        toplot = np.linalg.norm(np.linalg.norm(coeffs[:, :, :, j], axis=2), axis=1)
        ax.plot(xaxis, toplot, 'go--', linewidth=5, markersize=0, alpha=1.,
                color=colors[j], label=gnames[j])

    xax = xaxis.copy()
    xax.sort()
    ax.tick_params(labelsize=80)
    ax.set_yscale('symlog')
    ax.set_ylim(bottom=0, top=normax)
    tixx = np.hstack(
        [np.asarray([0]), 10 ** np.linspace(math.floor(np.log10(normax)), math.floor(np.log10(normax)) + 1, 2)])

    ax.grid(True, which="both", alpha=True)


def plot_watch_custom(to_plot, p, ax, colors,nreps, names = None, s=.1, fontsize = 100):

    if names is None:
        names = np.asarray(list(range(p)), dtype = str)

    theta = np.linspace(0, 2 * np.pi, 10000)
    cmap = plt.get_cmap('twilight_shifted', p)
    angles = np.linspace(0, 2 * np.pi, p + 1)
    radius = 1.
    a = radius * np.cos(theta)
    b = radius * np.sin(theta)

    ax.scatter(a, b, color='gray', s = .2, alpha=.1)
    if len(to_plot.shape) > 1:
        totes = np.sum(to_plot, axis=0)
    else:
        totes = to_plot

    for j in range(p):
        nm = names[j]
        ax.scatter(np.cos(angles[j]), np.sin(angles[j]), color=cmap.colors[j], marker='x')
        ax.text(x=1.15 * np.cos(angles[j]),
                y=1.15 * np.sin(angles[j]),
                s=r"$g_{{{}}}$".format(nm), color=colors[j],  # cmap.colors[j],
                fontdict={'fontsize': fontsize},
                horizontalalignment='center',
                verticalalignment='center')

    for j in range(p):
        ax.scatter(np.cos(angles[j]), np.sin(angles[j]), color=colors[j], marker='o', s= s* 1500 * totes[j])

    if len(to_plot.shape) > 1:
        for i in range(p):
            for j in range(p):
                x_values = [np.cos(angles[j]), np.cos(angles[i])]
                y_values = [np.sin(angles[j]), np.sin(angles[i])]
                ax.plot(x_values, y_values, linewidth=to_plot[i, j] * 8*s, color='black')

    ax.set_aspect(1)
    ax.set_axis_off()


def plot_watch(to_plot, names, colors, ax,nreps):

    p = to_plot.shape[0]
    theta = np.linspace(0, 2 * np.pi, 10000)
    angles = np.linspace(0, 2 * np.pi, p + 1)
    radius = 1.

    a = radius * np.cos(theta)
    b = radius * np.sin(theta)
    ax.scatter(a, b, color='gray', s=.2,
               alpha=.1)

    if len(to_plot.shape) > 1:
        totes = np.sum(to_plot, axis=0)
    else:
        totes = to_plot

    for j in range(p):
        ax.scatter(np.cos(angles[j]), np.sin(angles[j]), color=colors[j], marker='x')
        ax.text(x=1.2 * np.cos(angles[j]),
                y=1.2 * np.sin(angles[j]),
                s=names[j], color=colors[j],
                fontdict={'fontsize': 100},
                horizontalalignment='center',
                verticalalignment='center')


    for j in range(p):
        ax.scatter(np.cos(angles[j]), np.sin(angles[j]), color=colors[j], marker='o', s=100 * totes[j])

    if len(to_plot.shape) > 1:
        for i in range(p):
            for j in range(p):
                x_values = [np.cos(angles[j]), np.cos(angles[i])]
                y_values = [np.sin(angles[j]), np.sin(angles[i])]
                ax.plot(x_values, y_values, linewidth=to_plot[i, j], color='black')


    ax.set_aspect(1)
    ax.set_axis_off()


def plot_reg_path_ax_lambdasearch_customcolors(axes, coeffs, xaxis,fig, colors,gnames):
    p = coeffs.shape[3]
    q = coeffs.shape[1]
    rcParams['axes.titlesize'] = 30
    plt.rc('text', usetex=True)

    normax = np.sqrt(np.sum(np.sum(np.sum(coeffs ** 2, axis=1), axis=1), axis=1).max())

    for k in range(q):
        for j in range(p):
            toplot = np.linalg.norm(coeffs[:, k, :, j], axis=1)
            w = .15
            widths = np.asarray([width(xaxis[i], w) for i in range(len(xaxis))])
            axes[k + 1].plot(xaxis, toplot, 'go--', linewidth=5, markersize=0, alpha=1.,
                             color=colors[j], label=gnames[j])
    for j in range(p):
        toplot = np.linalg.norm(np.linalg.norm(coeffs[:, :, :, j], axis=2), axis=1)
        axes[0].plot(xaxis, toplot, 'go--', linewidth=5, markersize=0, alpha=1.,
                     color=colors[j], label=gnames[j])

    xax = xaxis.copy()
    xax.sort()

    for k in range(1 + q):
        axes[k].tick_params(labelsize=50)
        axes[k].set_yscale('symlog')
        axes[k].set_ylim(bottom=0, top=normax)
        if (k == 0):
            tixx = np.hstack(
                [np.asarray([0]), 10 ** np.linspace(math.floor(np.log10(normax)), math.floor(np.log10(normax)) + 1, 2)])
        if k != 0:
            axes[k].set_yticklabels([])
        if k != q:
            axes[k+1].set_title(r"$\phi_{{{}}}$".format(k+1), fontsize = 100)
        if k == 0:
            axes[k].set_title("Combined", fontdict={'fontsize': 100})
    for k in range(1 + q):
        axes[k].grid(True, which="both", alpha=True)
        axes[k].set_xlabel(r"$\lambda$", fontsize = 100)

    axes[0].set_ylabel(r"$\|\beta\|$", fontsize = 50)

    handles, labels = axes[0].get_legend_handles_labels()
    by_label = OrderedDict(zip(labels, handles))
    fig.subplots_adjust(right=0.85)
    leg_ax = fig.add_axes([.9, 0.15, 0.05, 0.7])
    leg_ax.axis('off')
    leg = leg_ax.legend(by_label.values(), gnames, prop={'size': 600 / p})
    for l in leg.get_lines():
        l.set_alpha(1)
    leg_ax.set_title("$g_{j}$", fontsize = 1500/p)