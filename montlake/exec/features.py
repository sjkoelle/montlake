# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/exec.get_features.ipynb (unless otherwise specified).

__all__ = ['load_data', 'get_features_parallel', 'parse_args']

# Cell
from pathos.multiprocessing import ProcessingPool as Pool
import pathos
from ..atomgeom.features import get_features
from ..utils.utils import data_stream_custom_range
import pickle
import sys
import argparse
import numpy as np
import itertools
import tqdm
import json

def load_data(dataset, name, outdir,numpoints):

    data = np.load(dataset)
    n = np.min((numpoints, data['R'].shape[0]))
    randomindices = np.random.choice(range(data['R'].shape[0]),n, replace = False)
    positions = data['R'][randomindices,:,:]

    np.save(outdir + '/'+name + 'indices',randomindices)
    np.save(outdir + '/'+name + 'positions',positions)

    return(positions)

def get_features_parallel(data,atoms2, atoms3,atoms4,cores):

    #cores = pathos.multiprocessing.cpu_count() - 1
    p = Pool(cores)
    n = data.shape[0]
    print('n',n)
    results = list(tqdm.tqdm(p.imap(
        lambda j: get_features(data[j],
                               atoms2 = atoms2,
                               atoms3 = atoms3,
                               atoms4 = atoms4),
        data_stream_custom_range(list(range(n)))), total=n))
    output = {}
    output['features2'] = np.stack([results[i][0] for i in range(n)])
    output['features3'] = np.stack([results[i][1] for i in range(n)])
    output['features4'] = np.stack([results[i][2] for i in range(n)])
    return(output)

# def parse_args(args):
#     parser = argparse.ArgumentParser()
#     parser.add_argument("--outdir")
#     parser.add_argument("--dataset")
#     parser.add_argument("--name")
#     parser.add_argument("--numpoints")
#     parser.add_argument("--cores")
#     return parser.parse_args(args)

def parse_args(args):
    parser= argparse.ArgumentParser()
    parser.add_argument("--config", help="Path to JSON config")
    args = parser.parse_args(args)
    return args